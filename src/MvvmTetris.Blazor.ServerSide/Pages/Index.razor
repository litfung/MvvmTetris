@page "/"


@using System.Reactive.Linq
@using System.Threading
@using MvvmTetris.Engine.Models
@using MvvmTetris.Engine.ViewModels
@using MvvmTetris.Blazor.ServerSide.Components
@inject GameViewModel Game


@functions
{
    protected override void OnInit()
    {
        //this.Game.InputCommand.Execute(Command.Play);
        this.Game.IsOver
            .Merge(this.Game.IsPlaying)
            .ObserveOn(SynchronizationContext.Current)
            .Subscribe(_ => this.StateHasChanged());
    }


    private void OnKeyDown(UIKeyboardEventArgs e)
    {
        Command command;
        switch (e.Code)
        {
            case "KeyZ": command = Command.RotateLeft; break;
            case "KeyX": command = Command.RotateRight; break;
            case "ArrowUp": command = Command.RotateRight; break;
            case "ArrowRight": command = Command.MoveRight; break;
            case "ArrowDown": command = Command.MoveDown; break;
            case "ArrowLeft": command = Command.MoveLeft; break;
            case "Escape": command = Command.Play; break;
            case "Space": command = Command.ForceFix; break;
            default: return;
        }
        this.Game.InputCommand.Execute(command);
    }
}


<div class="game" tabindex="0" onkeydown="@this.OnKeyDown">
    <div class="container">
        <div class="row">
            <div class="col-6">
                <FieldComponent Field="@this.Game.Field" />
            </div>
            <div class="col-6">
                <FieldComponent Field="@this.Game.NextField" />
                <ScoreComponent Score="@this.Game.Score" />
                <InputComponent OnCommandInputed="@this.Game.InputCommand.Execute" />
            </div>
        </div>
    </div>

    @if (this.Game.IsOver.Value)
    {
        <div class="game-over">Game is over !<br />Please press Esc key.</div>
    }
</div>