@page "/"


@using MvvmTetris.Engine.Models
@using MvvmTetris.Engine.ViewModels


@functions
{
    public GameViewModel Game { get; } = new GameViewModel();


    protected override void OnInit()
    {
        this.Game.Field.TetriminoMoved.Subscribe(_ => this.StateHasChanged());
        this.Game.Play();
    }


    private void OnKeyDown(UIKeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "KeyZ":       this.Game.Field.RotationTetrimino(RotationDirection.Left);  break;
            case "KeyX":       this.Game.Field.RotationTetrimino(RotationDirection.Right); break;
            case "ArrowUp":    this.Game.Field.RotationTetrimino(RotationDirection.Right); break;
            case "ArrowRight": this.Game.Field.MoveTetrimino(MoveDirection.Right); break;
            case "ArrowDown":  this.Game.Field.MoveTetrimino(MoveDirection.Down);  break;
            case "ArrowLeft":  this.Game.Field.MoveTetrimino(MoveDirection.Left);  break;
            case "Escape":     this.Game.Play(); break;
            case "Space":      this.Game.Field.ForceFixTetrimino(); break;
        }
    }
}


<div tabindex="0" onkeydown="@this.OnKeyDown">
    <table border="1" class="field">
        <tbody>
            @{
                var cells = this.Game.Field.Cells;
                var rowCount = cells.GetLength(0);
                var columnCount = cells.GetLength(1);

                for (var r = 0; r < cells.GetLength(0); r++)
                {
                    <tr>
                        @for (var c = 0; c < columnCount; c++)
                        {
                            var color = cells[r, c].Color.Value;
                            var rgb = $"rgb({color.R}, {color.G}, {color.B})";
                            <td style="background-color: @rgb"></td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>